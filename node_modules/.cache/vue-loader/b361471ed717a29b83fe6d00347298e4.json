{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/yellowins/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/yellowins/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Applications/XAMPP/xamppfiles/htdocs/yellowins/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/yellowins/src/components/Premium.vue?vue&type=template&id=86860652&scoped=true&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/yellowins/src/components/Premium.vue","mtime":1624989591348},{"path":"/Applications/XAMPP/xamppfiles/htdocs/yellowins/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/yellowins/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/yellowins/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/yellowins/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}